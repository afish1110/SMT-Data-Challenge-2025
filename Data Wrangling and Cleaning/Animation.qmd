---
title: "SMT 2025 Data Visualization Demo"
author: 
  - name: David Awosoga
    url: https://github.com/awosoga
    affiliation:
      - name: University of Waterloo
        url: https://uwaterloo.ca/statistics-and-actuarial-science/contacts/david-awosoga
execute:
  echo: true
  eval: false
  warning: false
  message: false
format:
  html:
    code-fold: show
---

### Load Data and Packages

This is performed using the script provided by the event organizers

```{r}
#| code-summary: Load data and packages

## Import Data
source("SMT_Data_Starter_2025.R")

## Load relevant libraries
library(tidyverse) # for data cleaning, wrangling, etc
library(sportyR) # for baseball field visualizations
if(!require(gifski)) install.packages("gifski") # a helper package for gganimate
library(gganimate) # to make the animated plot

example_game_id = "y1_d069_ACN_QEA"
example_play_id = 9
```

### Play-by-play sequences

`player_position_definition` and `game_events_definition` are helper functions used as term glossaries for `play_by_play`, which translates event codes from a `game_id` and `play` number into human readable text to contextualize play sequences.

```{r}
#| code-summary: Play-by-Play

player_position_definition <- function(code) {
  switch (as.character(code),
          "0" = "none",
          "1" = "pitcher",
          "2" = "catcher",
          "3" = "first baseman",
          "4" = "second baseman",
          "5" = "third baseman",
          "6" = "shortstop",
          "7" = "left fielder",
          "8" = "center fielder",
          "9" = "right fielder",
          "10"= "batter",
          "11" = "runner on first base",
          "12" = "runner on second base",
          "13" = "runner on third base",
          "255" = "ball event with no player"
  )
}

game_events_definition <- function(code) {

  switch (as.character(code),
          "1" = "pitch thrown",
          "2" = "ball acquired",
          "3" = "throw (ball-in-play)",
          "4" = "ball hit into play",
          "5" = "end of play.",
          "6" = "pickoff throw",
          "7" = "ball acquired - unknown field position",
          "8" = "throw (ball-in-play) - unknown field position",
          "9" = "ball deflection",
          "10"= "ball deflection off of wall",
          "11" = "home run",
          "16" = "ball bounce"
  )
}

play_by_play <- function(game_id, play) {
  
  game_events %>%
    filter(game_str == game_id, play_id == play) %>%
    select(event_code, player_position) %>%
    collect() %>% 
    mutate(event = map_chr(event_code, game_events_definition),
           player = map_chr(player_position, player_position_definition),
           pbp = case_when(
             player != "none" & event_code != 16 ~ paste(event, "by", player),
             .default = event)) %>% 
    pull(pbp) %>% str_flatten_comma() %>% str_to_sentence()
}

play_by_play(example_game_id, example_play_id)
```

### Animation

A lot of the column types in the dataset are inferred as `string` instead of `numeric`
in the arrow schema, such as `player_position` and `timestamp`. It's probably a good idea to fix that further upstream, but for the purposes of this example I modified those columns inside of the `animate_play` function so as to not touch `SMT_Data_Starter_2025.R`. The function is a bit slow due to the `arrow::collect` statements, so using `duckdb` in tandem with `arrow` will probably help speed things up.

```{r}
#| code-summary: Animation
animate_play <- function(game_id, play) {

  # Set the specs for the gif we want to create (lower res to make it run quicker)
  options(gganimate.dev_args = list(width = 3, height = 3, units = 'in', res = 120))

  # sometimes the frames per second at different stadiums can vary (30 fps vs 50 fps)
  # this finds an even rounding interval and calculates fps from the data explicitly
  fps <- player_pos %>%
    filter(game_str == game_id, play_id == play) %>%
    collect() %>%
    mutate(player_position = as.numeric(player_position)) %>%
    filter(player_position < 14) %>% # only filter for players 
    mutate(across(c(timestamp, field_x, field_y), as.numeric)) %>%
    mutate(fps = timestamp - lag(timestamp), .by = "player_position")  %>%
    count(fps) %>% slice_max(n) %>% pull(fps)

  time_of_pitch = game_events %>%
    filter(game_str == game_id, play_id == play, event_code == 1) %>%
    collect() %>%
    pull(timestamp)

  # Combine data into one data frame
  tracking_data <- player_pos %>%
    # start with player position data
    filter(game_str == game_id, play_id == play) %>%
    collect() %>%
    mutate(player_position = as.numeric(player_position)) %>%
    filter(player_position < 14) %>%
    mutate(type = if_else(player_position %in% c(10:13), "batter", "fielder"),
           position_z = NA
           ) %>%
    rename(position_x = field_x, position_y = field_y) %>%
    # add ball position data
    bind_rows(
      (ball_pos %>%
         filter(game_str == game_id, play_id == play) %>%
         collect() %>%
         rename(position_x = ball_position_x,
                position_y = ball_position_y,
                position_z = ball_position_z) %>%
         mutate(type = "ball", player_position = NA))
    )  %>%
    mutate(across(c(timestamp, position_x, position_y, position_z), as.numeric)) %>%
    arrange(timestamp) %>%
    # align timestamps to account for mechanical measurement error
    mutate(timestamp_adj = plyr::round_any(timestamp, fps)) %>%
    # trim the animation to start when the pitch is thrown
    filter(timestamp >= time_of_pitch) %>%
    mutate(frame_id = match(timestamp_adj, unique(timestamp_adj)))

  # make field design
  p <-  geom_baseball(league = "MiLB") +
    geom_point(data = tracking_data %>%
                 filter(type != "ball"),
               aes(x = position_x, y = position_y, fill = type),
               shape = 21, size = 3,
               show.legend = F) +
    geom_text(data = tracking_data %>%
                filter(type == "fielder"),
              aes(x = position_x, y = position_y, label = player_position),
              color = "black", size = 2,
              show.legend = F) +
    geom_point(data = tracking_data %>%
                 filter(type == "ball"),
               aes(x = position_x, y = position_y,
                   size = position_z),
               fill = "white",
               shape = 21,
               show.legend = F) +
    transition_time(frame_id) +
    annotate("text", x = c(150, 0), y = c(10, 400), color = "white",
             label = c(paste("Play:", play), paste("Game ID:", game_id))) +
    shadow_wake(0.1, exclude_layer = c(1:16))

  max_frame = max(tracking_data$frame_id)

  p2 = animate(p, fps = fps, nframes = max_frame)

  return(p2)
}

# example play sequence
animate_play(example_game_id, example_play_id)
```
